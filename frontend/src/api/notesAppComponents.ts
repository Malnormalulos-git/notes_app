/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useNotesAppContext, NotesAppContext } from "./notesAppContext";
import type * as Fetcher from "./notesAppFetcher";
import { notesAppFetch } from "./notesAppFetcher";
import type * as Schemas from "./notesAppSchemas";

export type RegisterError = Fetcher.ErrorWrapper<
  | {
      status: 401;
      payload: Schemas.ProblemDetails;
    }
  | {
      status: 409;
      payload: Schemas.ProblemDetails;
    }
>;

export type RegisterVariables = {
  body?: Schemas.RegisterUserDto;
} & NotesAppContext["fetcherOptions"];

export const fetchRegister = (
  variables: RegisterVariables,
  signal?: AbortSignal,
) =>
  notesAppFetch<undefined, RegisterError, Schemas.RegisterUserDto, {}, {}, {}>({
    url: "/api/auth/register",
    method: "post",
    ...variables,
    signal,
  });

export const useRegister = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, RegisterError, RegisterVariables>,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useNotesAppContext();
  return reactQuery.useMutation<undefined, RegisterError, RegisterVariables>({
    mutationFn: (variables: RegisterVariables) =>
      fetchRegister({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type LogInError = Fetcher.ErrorWrapper<{
  status: 401;
  payload: Schemas.ProblemDetails;
}>;

export type LogInVariables = {
  body?: Schemas.LogInDto;
} & NotesAppContext["fetcherOptions"];

export const fetchLogIn = (variables: LogInVariables, signal?: AbortSignal) =>
  notesAppFetch<
    Schemas.AuthResponseDto,
    LogInError,
    Schemas.LogInDto,
    {},
    {},
    {}
  >({ url: "/api/auth/login", method: "post", ...variables, signal });

export const useLogIn = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.AuthResponseDto,
      LogInError,
      LogInVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useNotesAppContext();
  return reactQuery.useMutation<
    Schemas.AuthResponseDto,
    LogInError,
    LogInVariables
  >({
    mutationFn: (variables: LogInVariables) =>
      fetchLogIn({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type CreateNoteError = Fetcher.ErrorWrapper<undefined>;

export type CreateNoteVariables = {
  body?: Schemas.CreateNoteDto;
} & NotesAppContext["fetcherOptions"];

export const fetchCreateNote = (
  variables: CreateNoteVariables,
  signal?: AbortSignal,
) =>
  notesAppFetch<
    Schemas.NoteDto,
    CreateNoteError,
    Schemas.CreateNoteDto,
    {},
    {},
    {}
  >({ url: "/api/notes", method: "post", ...variables, signal });

export const useCreateNote = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.NoteDto,
      CreateNoteError,
      CreateNoteVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useNotesAppContext();
  return reactQuery.useMutation<
    Schemas.NoteDto,
    CreateNoteError,
    CreateNoteVariables
  >({
    mutationFn: (variables: CreateNoteVariables) =>
      fetchCreateNote({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type GetNotesError = Fetcher.ErrorWrapper<{
  status: 404;
  payload: Schemas.ProblemDetails;
}>;

export type GetNotesResponse = Schemas.NoteDto[];

export type GetNotesVariables = NotesAppContext["fetcherOptions"];

export const fetchGetNotes = (
  variables: GetNotesVariables,
  signal?: AbortSignal,
) =>
  notesAppFetch<GetNotesResponse, GetNotesError, undefined, {}, {}, {}>({
    url: "/api/notes",
    method: "get",
    ...variables,
    signal,
  });

export const useGetNotes = <TData = GetNotesResponse,>(
  variables: GetNotesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<GetNotesResponse, GetNotesError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useNotesAppContext(options);
  return reactQuery.useQuery<GetNotesResponse, GetNotesError, TData>({
    queryKey: queryKeyFn({
      path: "/api/notes",
      operationId: "getNotes",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGetNotes({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type EditNoteError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.ProblemDetails;
    }
  | {
      status: 403;
      payload: Schemas.ProblemDetails;
    }
>;

export type EditNoteVariables = {
  body?: Schemas.EditNoteDto;
} & NotesAppContext["fetcherOptions"];

export const fetchEditNote = (
  variables: EditNoteVariables,
  signal?: AbortSignal,
) =>
  notesAppFetch<undefined, EditNoteError, Schemas.EditNoteDto, {}, {}, {}>({
    url: "/api/notes",
    method: "patch",
    ...variables,
    signal,
  });

export const useEditNote = (
  options?: Omit<
    reactQuery.UseMutationOptions<undefined, EditNoteError, EditNoteVariables>,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useNotesAppContext();
  return reactQuery.useMutation<undefined, EditNoteError, EditNoteVariables>({
    mutationFn: (variables: EditNoteVariables) =>
      fetchEditNote({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type GetNotePathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type GetNoteError = Fetcher.ErrorWrapper<
  | {
      status: 403;
      payload: Schemas.ProblemDetails;
    }
  | {
      status: 404;
      payload: Schemas.ProblemDetails;
    }
>;

export type GetNoteVariables = {
  pathParams: GetNotePathParams;
} & NotesAppContext["fetcherOptions"];

export const fetchGetNote = (
  variables: GetNoteVariables,
  signal?: AbortSignal,
) =>
  notesAppFetch<
    Schemas.NoteDto,
    GetNoteError,
    undefined,
    {},
    {},
    GetNotePathParams
  >({ url: "/api/notes/{id}", method: "get", ...variables, signal });

export const useGetNote = <TData = Schemas.NoteDto,>(
  variables: GetNoteVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.NoteDto, GetNoteError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useNotesAppContext(options);
  return reactQuery.useQuery<Schemas.NoteDto, GetNoteError, TData>({
    queryKey: queryKeyFn({
      path: "/api/notes/{id}",
      operationId: "getNote",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchGetNote({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type DeleteNotePathParams = {
  /**
   * @format int64
   */
  id: number;
};

export type DeleteNoteError = Fetcher.ErrorWrapper<{
  status: 403;
  payload: Schemas.ProblemDetails;
}>;

export type DeleteNoteVariables = {
  pathParams: DeleteNotePathParams;
} & NotesAppContext["fetcherOptions"];

export const fetchDeleteNote = (
  variables: DeleteNoteVariables,
  signal?: AbortSignal,
) =>
  notesAppFetch<
    undefined,
    DeleteNoteError,
    undefined,
    {},
    {},
    DeleteNotePathParams
  >({ url: "/api/notes/{id}", method: "delete", ...variables, signal });

export const useDeleteNote = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      DeleteNoteError,
      DeleteNoteVariables
    >,
    "mutationFn"
  >,
) => {
  const { fetcherOptions } = useNotesAppContext();
  return reactQuery.useMutation<
    undefined,
    DeleteNoteError,
    DeleteNoteVariables
  >({
    mutationFn: (variables: DeleteNoteVariables) =>
      fetchDeleteNote({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type QueryOperation =
  | {
      path: "/api/notes";
      operationId: "getNotes";
      variables: GetNotesVariables;
    }
  | {
      path: "/api/notes/{id}";
      operationId: "getNote";
      variables: GetNoteVariables;
    };
